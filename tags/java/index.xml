<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on </title>
    <link>https://piotrglazar.github.io/tags/java/</link>
    <description>Recent content in java on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2020</copyright>
    <lastBuildDate>Wed, 23 Sep 2020 22:29:46 +0200</lastBuildDate>
    
	<atom:link href="https://piotrglazar.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 14 Records</title>
      <link>https://piotrglazar.github.io/blog/java-14-records/</link>
      <pubDate>Wed, 23 Sep 2020 22:29:46 +0200</pubDate>
      
      <guid>https://piotrglazar.github.io/blog/java-14-records/</guid>
      <description>https://dzone.com/articles/a-first-look-at-records-in-java-14
Introduction Java 14 brings in another cool feature - Records. They are designed to represent only the state, without additional boilerplate. This feature is in preview, so you have to explicitly enable it in your project. You can check my previous post to see how to do it in Gradle. Alternatively, you can take a look at full example here.
How does a record look like Take a look at the following piece of code:</description>
    </item>
    
    <item>
      <title>Java 14 instanceof Pattern Matching</title>
      <link>https://piotrglazar.github.io/blog/java-14-instanceof-pattern-matching/</link>
      <pubDate>Sun, 13 Sep 2020 13:28:39 +0200</pubDate>
      
      <guid>https://piotrglazar.github.io/blog/java-14-instanceof-pattern-matching/</guid>
      <description>Introduction As of today, Java 14 is the latest Java version. It introduces various cool features that I&amp;rsquo;d like to show here. However, in this post I will focus on Pattern Matching for instanceof. This feature is in preview, so you have to explicitly enable it in your project. You can check my previous post to see how to do it in Gradle. Alternatively, you can take a look at full example here.</description>
    </item>
    
    <item>
      <title>Java Preview Features</title>
      <link>https://piotrglazar.github.io/blog/java-preview-features-in-gradle/</link>
      <pubDate>Sun, 13 Sep 2020 13:05:21 +0200</pubDate>
      
      <guid>https://piotrglazar.github.io/blog/java-preview-features-in-gradle/</guid>
      <description>Introduction A great software developer should always learn. Fortunately, after Java 8 has been released, the development pace of next Java versions increased. I think that every Java developer should be up do date with the newest features. However, some of them are marked as preview, so they won&amp;rsquo;t compile by default.
Preview features and Gradle Gradle is my favourite build tool for Java projects. In this post I&amp;rsquo;m going to present how to use Java preview features in Gradle projects.</description>
    </item>
    
    <item>
      <title>Where does that class come from?</title>
      <link>https://piotrglazar.github.io/blog/class-location/</link>
      <pubDate>Fri, 21 Aug 2020 16:36:41 +0200</pubDate>
      
      <guid>https://piotrglazar.github.io/blog/class-location/</guid>
      <description>Dependency hell I believe every Java developer is familiar with the dependency hell term. We use external libraries because they speed up the development process. Instead of reinventing the wheel we can just include a library, like Guava, and we are able to use various functionalities that have been well tested by other people. But unfortunately sometimes we have to pay a high price for this. Libraries can include other libraries and so on, forming a dependency graph.</description>
    </item>
    
  </channel>
</rss>